kind: pipeline
type: docker
name: build images

steps:
  - name: build php
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_php
      dockerfile: Dockerfile-php-base
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
    depends_on: [clone]

  - name: build nginx
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_nginx
      dockerfile: Dockerfile-nginx-base
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
    depends_on: [clone]

  - name: build tagger
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_drone-tagger
      dockerfile: drone-tag/Dockerfile-drone-tag
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
      context: drone-tag
    depends_on: [clone]

  - name: build param checker
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_drone-param-check
      dockerfile: drone-param-check/Dockerfile-drone-check-parameters
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
      context: drone-param-check
    depends_on: [clone]

  - name: build ecs_task_update_amd64
    image: golang:alpine
    depends_on: [ clone ]
    environment:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    commands:
    - |
      if test "${DRONE_TAG}" = ""; then
        cd drone-ecs-task-update && go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o bin/linux/amd64/drone_ecs_task_repo_update
      else
        cd drone-ecs-task-update && go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o bin/linux/amd64/drone_ecs_task_repo_update
      fi

  - name: build ecs_task_update_amd64 container
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_drone-ecs-task-update
      dockerfile: drone-ecs-task-update/Dockerfile-ecs-task-update
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
      context: drone-ecs-task-update
    depends_on:
      - build ecs_task_update_amd64

  - name: build ecs_void_amd64
    image: golang:alpine
    depends_on: [ clone ]
    environment:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    commands:
    - |
      if test "${DRONE_TAG}" = ""; then
        cd ecs-void && go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o bin/linux/amd64/ecs_void
      else
        cd ecs-void && go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o bin/linux/amd64/ecs_void
      fi

  - name: build ecs_void_amd64 container
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_ecs-void
      dockerfile: ecs-void/Dockerfile-ecs-void
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
      context: ecs-void
    depends_on:
      - build ecs_void_amd64

  - name: build ecs_standalone_task_amd64
    image: golang:alpine
    depends_on: [ clone ]
    environment:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: 0
    commands:
    - |
      if test "${DRONE_TAG}" = ""; then
        cd drone-ecs-standalone-task && go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o bin/linux/amd64/drone-ecs-standalone-task
      else
        cd drone-ecs-standalone-task && go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o bin/linux/amd64/drone-ecs-standalone-task
      fi

  - name: build ecs_standalone_task_amd64 container
    image: plugins/ecr
    settings:
      mirror:
        from_secret: docker_proxy_mirror
      purge: true
      tags:
        - latest
        - ${DRONE_COMMIT}
      registry:
        from_secret: ecr_registry
      repo:
        from_secret: ecr_url_drone-ecs-standalone-task
      dockerfile: drone-ecs-standalone-task/Dockerfile-ecs-standalone-task
      access_key:
        from_secret: aws_access_key
      secret_key:
        from_secret: aws_access_key_secret
      region: eu-west-1
      context: drone-ecs-standalone-task
    depends_on:
      - build ecs_standalone_task_amd64

trigger:
  repo:
    - BerlingskeMedia/ci.images
  event:
    include:
      - push
      - cron
    exclude:
      - pull_request
  branch:
    - master

---
kind: "secret"
name: "aws_access_key"
get:
  path: "drone/ci-production-images"
  name: "aws_access_key"

---
kind: "secret"
name: "aws_access_key_secret"
get:
  path: "drone/ci-production-images"
  name: "aws_access_key_secret"

---
kind: "secret"
name: "aws_access_key_secret"
get:
  path: "drone/ci-production-images"
  name: "aws_access_key_secret"

---

kind: "secret"
name: "ecr_registry"
get:
  path: "drone/ci-production-images"
  name: "ecr_registry"
---

kind: "secret"
name: "ecr_url_drone-param-check"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_drone-param-check"
---

kind: "secret"
name: "ecr_url_drone-tagger"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_drone-tagger"
---

kind: "secret"
name: "ecr_url_nginx"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_nginx"
---

kind: "secret"
name: "ecr_url_php"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_php"
---

kind: "secret"
name: "ecr_url_drone-ecs-task-update"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_drone-ecs-task-update"

---

kind: "secret"
name: "ecr_url_ecs-void"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_ecs-void"

---
kind: "secret"
name: "ecr_url_drone-ecs-standalone-task"
get:
  path: "drone/ci-production-images"
  name: "ecr_url_drone-ecs-standalone-task"
